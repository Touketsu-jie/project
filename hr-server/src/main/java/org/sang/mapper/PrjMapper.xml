<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sang.mapper.PrjMapper">

    <insert id="addPrj" parameterType="org.sang.bean.Project">
            insert into projects (name, department_id, project_code, jp_project_code, start_date, end_date, status, created_date)
    values (#{name,jdbcType=VARCHAR},
      #{departmentId,jdbcType=INTEGER},
      #{projectCode,jdbcType=VARCHAR},
      #{jpProjectCode,jdbcType=VARCHAR},
      #{startDate,jdbcType=DATE},
      #{endDate,jdbcType=DATE},
      #{status,jdbcType=VARCHAR},
      now()
      )
    </insert>
    <select id="getMaxPrjID" resultType="Long">
        select max(id) from projects
    </select>
    <resultMap id="BaseResultMap" type="org.sang.bean.Project">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="department_id" property="departmentId"/>
        <result column="department_name" property="departmentName"/>
        <result column="project_code" property="projectCode"/>
        <result column="jp_project_code" property="jpProjectCode"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="status" property="status"/>
        <result column="created_date" property="createdDate"/>
    </resultMap>
    <select id="getProjectByPage" resultMap="BaseResultMap">
        SELECT
        e.*,
        d.`name` AS department_name
        FROM
        projects e,
        department d
        WHERE
        e.department_id = d.`id`
        <if test="keywords!=null and keywords!=''">
        AND (e.`name` LIKE concat('%',#{keywords},'%')
        or e.`project_code` LIKE concat('%',#{keywords},'%')
        or e.`jp_project_code` LIKE concat('%',#{keywords},'%'))
        </if>
        <if test="start!=null and size!=''">
            order by e.id limit #{start},#{size}
        </if>
    </select>
    <select id="getCountByKeywords" resultType="Long">
        SELECT count(*)  FROM
        projects e,
        department d
        WHERE
        e.department_id = d.`id`
        <if test="keywords!=null and keywords!=''">
        AND (e.`name` LIKE concat('%',#{keywords},'%')
        or e.`project_code` LIKE concat('%',#{keywords},'%')
        or e.`jp_project_code` LIKE concat('%',#{keywords},'%'))
        </if>
    </select>
    <update id="updateProject">
        update employee
        <set>
            <if test="emp.name != null">
                name = #{emp.name,jdbcType=VARCHAR},
            </if>
            <if test="emp.gender != null">
                gender = #{emp.gender,jdbcType=CHAR},
            </if>
            <if test="emp.birthday != null">
                birthday = #{emp.birthday,jdbcType=DATE},
            </if>
            <if test="emp.idCard != null">
                idCard = #{emp.idCard,jdbcType=CHAR},
            </if>
            <if test="emp.wedlock != null">
                wedlock = #{emp.wedlock,jdbcType=CHAR},
            </if>
            <if test="emp.nationId != null">
                nationId = #{emp.nationId,jdbcType=INTEGER},
            </if>
            <if test="emp.nativePlace != null">
                nativePlace = #{emp.nativePlace,jdbcType=VARCHAR},
            </if>
            <if test="emp.politicId != null">
                politicId = #{emp.politicId,jdbcType=INTEGER},
            </if>
            <if test="emp.email != null">
                email = #{emp.email,jdbcType=VARCHAR},
            </if>
            <if test="emp.phone != null">
                phone = #{emp.phone,jdbcType=VARCHAR},
            </if>
            <if test="emp.address != null">
                address = #{emp.address,jdbcType=VARCHAR},
            </if>
            <if test="emp.departmentId != null">
                departmentId = #{emp.departmentId,jdbcType=INTEGER},
            </if>
            <if test="emp.jobLevelId != null">
                jobLevelId = #{emp.jobLevelId,jdbcType=INTEGER},
            </if>
            <if test="emp.posId != null">
                posId = #{emp.posId,jdbcType=INTEGER},
            </if>
            <if test="emp.engageForm != null">
                engageForm = #{emp.engageForm,jdbcType=VARCHAR},
            </if>
            <if test="emp.tiptopDegree != null">
                tiptopDegree = #{emp.tiptopDegree,jdbcType=CHAR},
            </if>
            <if test="emp.specialty != null">
                specialty = #{emp.specialty,jdbcType=VARCHAR},
            </if>
            <if test="emp.school != null">
                school = #{emp.school,jdbcType=VARCHAR},
            </if>
            <if test="emp.beginDate != null">
                beginDate = #{emp.beginDate,jdbcType=DATE},
            </if>
            <if test="emp.workState != null">
                workState = #{emp.workState,jdbcType=CHAR},
            </if>
            <if test="emp.contractTerm != null">
                contractTerm = #{emp.contractTerm,jdbcType=DOUBLE},
            </if>
            <if test="emp.conversionTime != null">
                conversionTime = #{emp.conversionTime,jdbcType=DATE},
            </if>
            <if test="emp.notWorkDate != null">
                notWorkDate = #{emp.notWorkDate,jdbcType=DATE},
            </if>
            <if test="emp.beginContract != null">
                beginContract = #{emp.beginContract,jdbcType=DATE},
            </if>
            <if test="emp.endContract != null">
                endContract = #{emp.endContract,jdbcType=DATE},
            </if>
        </set>
        where id = #{emp.id,jdbcType=BIGINT}
    </update>
    <delete id="deletePrjById">
        DELETE FROM projects WHERE id IN
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </delete>
    <insert id="addPrjs">
        insert into employee (name, gender,
        birthday, idCard, wedlock, nationId,
        nativePlace, politicId, email,
        phone, address, departmentId,
        jobLevelId, posId, engageForm,
        tiptopDegree, specialty, school,
        beginDate,workID,
        contractTerm, conversionTime,
        beginContract, endContract, workAge
        )
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.name,jdbcType=VARCHAR}, #{emp.gender,jdbcType=CHAR},
            #{emp.birthday,jdbcType=DATE}, #{emp.idCard,jdbcType=CHAR}, #{emp.wedlock,jdbcType=CHAR},
            #{emp.nationId,jdbcType=BIGINT},
            #{emp.nativePlace,jdbcType=VARCHAR}, #{emp.politicId,jdbcType=BIGINT}, #{emp.email,jdbcType=VARCHAR},
            #{emp.phone,jdbcType=VARCHAR}, #{emp.address,jdbcType=VARCHAR}, #{emp.departmentId,jdbcType=BIGINT},
            #{emp.jobLevelId,jdbcType=BIGINT}, #{emp.posId,jdbcType=BIGINT}, #{emp.engageForm,jdbcType=VARCHAR},
            #{emp.tiptopDegree,jdbcType=VARCHAR}, #{emp.specialty,jdbcType=VARCHAR}, #{emp.school,jdbcType=VARCHAR},
            #{emp.beginDate,jdbcType=DATE},#{emp.workID,jdbcType=BIGINT},
            #{emp.contractTerm,jdbcType=BIGINT}, #{emp.conversionTime,jdbcType=DATE},
            #{emp.beginContract,jdbcType=DATE}, #{emp.endContract,jdbcType=DATE}, #{emp.workAge,jdbcType=INTEGER}
            )
        </foreach>
    </insert>
    <select id="getProjectByPageShort" resultMap="BaseResultMap">
select e.*,d.`id` as did,d.`name` as dname,s.`id` as sid,s.`accumulationFundBase`,s.`accumulationFundPer`,s.`allSalary`,s.`basicSalary`,s.`bonus`,s.`createDate`,s.`lunchSalary`,s.`medicalBase`,s.`medicalPer`,s.`name` as sname,s.`pensionBase`,s.`pensionPer`,s.`trafficSalary` from employee e left join department d on e.`departmentId`=d.id left join empsalary es on es.`eid`=e.`id` left join salary s on s.`id`=es.`sid` ORDER BY e.id limit #{start},#{size}
    </select>
</mapper>